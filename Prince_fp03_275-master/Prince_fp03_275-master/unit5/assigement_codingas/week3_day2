/*
 * Q1/-
 * Cocoa Confections is a small bakery that sells brownies, cookies, pies, and
 * other
 * delicious treats to customers online. It keeps records of all of its online
 * sales in an
 * SQL database that is automatically populated as customers places orders on
 * its site.
 * In its database, Cocoa Confections has a customers table to keep track of
 * customer
 * contact information, and an orders table to keep track of various orders that
 * those
 * customers have placed. The schema of these tables is as follows:
 * 
 * 
 * CREATE TABLE customers (
 * customer_id INT PRIMARY KEY,
 * first_name VARCHAR(255) NOT NULL,
 * last_name VARCHAR(255) NOT NULL,
 * email VARCHAR(255) NOT NULL,
 * address VARCHAR(255) DEFAULT NULL,
 * city VARCHAR(255) DEFAULT NULL,
 * state VARCHAR(2) DEFAULT NULL,
 * zip_code VARCHAR(5) DEFAULT NULL
 * );
 * CREATE TABLE orders (
 * order_id INT PRIMARY KEY,
 * customer_id INT NOT NULL,
 * order_placed_date DATE NOT NULL,
 * FOREIGN KEY (customer_id) REFERENCES customers
 * (customer_id)
 * );
 * It's the end of 2016, and the owner of Cocoa Confections wants to write an
 * SQL
 * query that finds the COUNT of orders placed in 2016 by customer e-mail
 * address.
 * She wants to ORDER the results by the COUNT of orders placed in 2016,
 * descending, so that she can personally send thank-you e-mails to Cocoa
 * Confection's top customers by order volume.
 * Can you write a query that will help the owner of Cocoa Confections find the
 * COUNT of all orders placed in 2016, by customer e-mail address, sorted
 * Descending?
 * Sample Input:
 * Customers:
 * +-----------------+---------------+--------------+---------------------+-----
 * -------+-------------+-------+----------
 * --+
 * | customer_id | first_name | last_name | email | address | city | state |
 * zip_code |
 * +-----------------+---------------+--------------+--------------------+------
 * ------+-------------+-------+-----------
 * --+
 * | 1 | abc | a | abc@mail.com | 1st street | chennai | TN | 60001 |
 * | 2 | efg | e | efg@mail.com | 2nd street | Bangalore | KA| 50002 |
 * | 3 | ijk | i | ijk@mail.com | 3nd street | Mumbai | MH | 40002 |
 * +------------------+----------------+------------+--------------------+------
 * ---------+-----------+-------+----------
 * +
 * 
 * Orders:
 * +-----------+-----------------+--------------------------+
 * | order_id | customer_id | order_placed_date |
 * +-----------+-----------------+--------------------------+
 * | 1 | 1 | 2016-11-11 |
 * | 2 | 1 | 2016-10-01 |
 * | 3 | 2 | 2016-06-01 |
 * | 4 | 2 | 2015-06-01 |
 * | 5 | 1 | 2015-06-01 |
 * +----------+-------------+--------------------------------+
 * 
 * Sample OutPut:
 * +--------------------+-----------------+
 * | email | order_count |
 * +--------------------+-----------------+
 * | abc@mail.com | 2 |
 * | efg@mail.com | 1 |
 * +--------------------+-----------------+
 * ans:=--
 * 1st(customers) insert
 * > insert into customers values(1,'abc','a','abc@mail.com','1st
 * street','chennai','TN',60001);
 * > insert into customers values(2,'efg','e','efg@mail.com','2st
 * street','Bangalore','KA',50002);
 * > insert into customers values(3,'ijk','i','ijk@mail.com','3st
 * street','Mumbai','MH',40002);
 * 2st(Orders) insert:-
 * > insert into orders values(1,1,'2016-11-11');
 * > insert into orders values(2,1,'2016-10-01');
 * > insert into orders values(3,2,'2016-06-01');
 * > insert into orders values(4,2,'2015-06-01');
 * > insert into orders values(5,1,'2015-06-01');
 * 
 * main code:--
 * select c.email,count(c.email) from customers c,orders o where
 * c.customer_id=o.customer_id and year(o.order_placed_date)='2016' group by
 * c.email;
 * +--------------+----------------+
 * | email | count(c.email) |
 * +--------------+----------------+
 * | abc@mail.com | 2 |
 * | efg@mail.com | 1 |
 * +--------------+----------------+
 * 
 * 
 * 2.
 * CREATE TABLE Worker (
 * WORKER_ID INT PRIMARY KEY,
 * FIRST_NAME VARCHAR(25),
 * LAST_NAME VARCHAR(25),
 * SALARY INT,
 * JOINING_DATE DATETIME,
 * DEPARTMENT VARCHAR(25)
 * );
 * INSERT INTO Worker
 * (WORKER_ID, FIRST_NAME, LAST_NAME, SALARY, JOINING_DATE, DEPARTMENT)
 * VALUES
 * (001, 'Monika', 'Arora', 100000, '14-02-20 09.00.00', 'HR'),
 * (002, 'Niharika', 'Verma', 80000, '14-06-11 09.00.00', 'Admin'),
 * (003, 'Vishal', 'Singhal', 300000, '14-02-20 09.00.00', 'HR'),
 * (004, 'Amitabh', 'Singh', 500000, '14-02-20 09.00.00', 'Admin'),
 * (005, 'Vivek', 'Bhati', 500000, '14-06-11 09.00.00', 'Admin'),
 * (006, 'Vipul', 'Diwan', 200000, '14-06-11 09.00.00', 'Account'),
 * (007, 'Satish', 'Kumar', 75000, '14-01-20 09.00.00', 'Account'),
 * (008, 'Geetika', 'Chauhan', 90000, '14-04-11 09.00.00', 'Admin');
 * CREATE TABLE Bonus (
 * WORKER_REF_ID INT,
 * BONUS_AMOUNT INT,
 * BONUS_DATE DATETIME,
 * FOREIGN KEY (WORKER_REF_ID)
 * REFERENCES Worker(WORKER_ID)
 * ON DELETE CASCADE
 * );
 * INSERT INTO Bonus
 * (WORKER_REF_ID, BONUS_AMOUNT, BONUS_DATE) VALUES
 * (001, 5000, '16-02-20'),
 * (002, 3000, '16-06-11'),
 * (003, 4000, '16-02-20'),
 * (001, 4500, '16-02-20'),
 * (002, 3500, '16-06-11');
 * CREATE TABLE Title (
 * WORKER_REF_ID INT,
 * WORKER_TITLE VARCHAR(25),
 * AFFECTED_FROM DATETIME,
 * FOREIGN KEY (WORKER_REF_ID)
 * REFERENCES Worker(WORKER_ID)
 * ON DELETE CASCADE
 * );
 * INSERT INTO Title
 * (WORKER_REF_ID, WORKER_TITLE, AFFECTED_FROM) VALUES
 * (001, 'Manager', '2016-02-20 00:00:00'),
 * (002, 'Executive', '2016-06-11 00:00:00'),
 * (008, 'Executive', '2016-06-11 00:00:00'),
 * (005, 'Manager', '2016-06-11 00:00:00'),
 * (004, 'Asst. Manager', '2016-06-11 00:00:00'),
 * (007, 'Executive', '2016-06-11 00:00:00'),
 * (006, 'Lead', '2016-06-11 00:00:00'),
 * (003, 'Lead', '2016-06-11 00:00:00');
 * 1. Write an SQL query to show the second highest salary from a Worker table.
 * ans:---)****:-
 * +--------+
 * | SALARY |
 * +--------+
 * | 300000 |
 * +--------+
 * 
 * SELECT SALARY FROM Worker e WHERE 2 = (SELECT COUNT(DISTINCT SALARY) FROM
 * Worker p WHERE e.SALARY<=p.SALARY);
 * 2. Write an SQL query to determine the 5 highest salary from a Worker table.
 * ans:----******):-
 * > select distinct salary from Worker order by salary desc limit 5;
 * +--------+
 * | salary |
 * +--------+
 * | 500000 |
 * | 300000 |
 * | 200000 |
 * | 100000 |
 * | 90000 |
 * +--------+
 * 
 * 3. Write an SQL query to show only even rows from a Worker table.
 * SELECT * FROM worker WHERE mod(column_name,2) = 0;
 * +-----------+------------+-----------+--------+---------------------+--------
 * ----+
 * | WORKER_ID | FIRST_NAME | LAST_NAME | SALARY | JOINING_DATE | DEPARTMENT |
 * +-----------+------------+-----------+--------+---------------------+--------
 * ----+
 * | 2 | Niharika | Verma | 80000 | 2014-06-11 09:00:00 | Admin |
 * | 4 | Amitabh | Singh | 500000 | 2014-02-20 09:00:00 | Admin |
 * | 6 | Vipul | Diwan | 200000 | 2014-06-11 09:00:00 | Account |
 * | 8 | Geetika | Chauhan | 90000 | 2014-04-11 09:00:00 | Admin |
 * +-----------+------------+-----------+--------+---------------------+--------
 * ----+
 * 
 * 4. Write an SQL query to fetch the no. of workers for each department in
 * descending order
 * from the Worker table.
 * mysql> select DEPARTMENT, count(*) from Worker group by DEPARTMENT ORDER BY
 * count(*) DESC ;
 * +------------+----------+
 * | DEPARTMENT | count(*) |
 * +------------+----------+
 * | Admin | 4 |
 * | HR | 2 |
 * | Account | 2 |
 * +------------+----------+
 * 3 rows in set (0.00 sec)
 * 
 * 
 * 5. Write an SQL query to fetch the list of employees with the same salary
 * from the Worker
 * table.
 * 
 * SELECT FIRST_NAME, salary FROM Worker WHERE SALARY IN (SELECT Salary FROM
 * Worker GROUP BY Salary HAVING COUNT(*) > 1);
 * 
 * +------------+--------+
 * | FIRST_NAME | salary |
 * +------------+--------+
 * | Amitabh | 500000 |
 * | Vivek | 500000 |
 * +------------+--------+
 * 
 */


1.	Count the number of students in each department.

select BRANCH, count(*) from student group by BRANCH;
select BRANCH, count(BRANCH) from student group by BRANCH;

+--------+----------+
| BRANCH | count(*) |
+--------+----------+
| CSE    |        2 |
| etc    |        3 |
| eee    |        1 |
| bme    |        1 |
+--------+----------+
4 rows in set (0.00 sec)



2.	Count the number of students in each department where the department name starts with ‘E’.

select branch, count(branch) from student where branch like 'e%' group by branch;

+--------+---------------+
| branch | count(branch) |
+--------+---------------+
| etc    |             3 |
| eee    |             1 |
+--------+---------------+
2 rows in set (0.00 sec)



3.	Add a field called MARKS to the table STUDENT which can hold a number up to 8 digit in length.

alter table Student add marks varchar(8);

Query OK, 0 rows affected (0.05 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> select * from student;
+--------+--------+--------+---------+-------+
| NAME   | ROLLNO | BRANCH | CITY    | marks |
+--------+--------+--------+---------+-------+
| Vijay  |    150 | CSE    | Chennai | NULL  |
| sita   |    202 | etc    | kolkata | NULL  |
| ravi   |    300 | eee    | delhi   | NULL  |
| basu   |    165 | etc    | chennai | NULL  |
| rashmi |    107 | etc    | rkl     | NULL  |
| karan  |    111 | cse    | ctc     | NULL  |
| rekha  |    117 | bme    | bbsr    | NULL  |
+--------+--------+--------+---------+-------+
7 rows in set (0.00 sec)


4.	Modify the field:” NAME” of the table STUDENT to hold a maximum of 25 characters.
alter table Student modify name varchar(25);

Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc student;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| name   | varchar(25) | YES  |     | NULL    |       |
| ROLLNO | int         | YES  |     | NULL    |       |
| BRANCH | varchar(20) | YES  |     | NULL    |       |
| CITY   | varchar(20) | YES  |     | NULL    |       |
| marks  | varchar(8)  | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
5 rows in set (0.01 sec)


5.	Delete all rows from the table STUDENT where the branch is ETC.
delete from STUDENT where branch = 'ETC';

Query OK, 3 rows affected (0.01 sec)

select * from student;

+-------+--------+--------+---------+-------+
| name  | ROLLNO | BRANCH | CITY    | marks |
+-------+--------+--------+---------+-------+
| Vijay |    150 | CSE    | Chennai | NULL  |
| ravi  |    300 | eee    | delhi   | NULL  |
| karan |    111 | cse    | ctc     | NULL  |
| rekha |    117 | bme    | bbsr    | NULL  |
+-------+--------+--------+---------+-------+
4 rows in set (0.00 sec)


6.	Rename the table STUDENT to STUDINFORMATION.


mysql> rename table Student to STUDINFORMATION;
Query OK, 0 rows affected (0.02 sec)

mysql> desc STUDINFORMATION;
+--------+-------------+------+-----+---------+-------+
| Field  | Type        | Null | Key | Default | Extra |
+--------+-------------+------+-----+---------+-------+
| name   | varchar(25) | YES  |     | NULL    |       |
| ROLLNO | int         | YES  |     | NULL    |       |
| BRANCH | varchar(20) | YES  |     | NULL    |       |
| CITY   | varchar(20) | YES  |     | NULL    |       |
| marks  | varchar(8)  | YES  |     | NULL    |       |
+--------+-------------+------+-----+---------+-------+
5 rows in set (0.01 sec)


7.	Delete all the data part from the table STUDENT.
delete from STUDINFORMATION;

Query OK, 4 rows affected (0.01 sec)

mysql> select * from STUDINFORMATION;
Empty set (0.00 sec)


8.	Destroy the table STUDENT.

drop table STUDINFORMATION;
Query OK, 0 rows affected (0.04 sec)
